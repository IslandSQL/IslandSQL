/*
 * Copyright 2023 Philipp Salvisberg <philipp.salvisberg@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.islandsql.grammar;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.misc.Interval;

/**
 * Base class for IslandSqlLexer class generated by ANTLR.
 * Used to provide methods to be used as semantic predicates in the lexer grammar.
 */
public abstract class IslandSqlLexerBase extends Lexer {
    private String quoteDelimiter1;

    /**
     * Constructor.
     *
     * @param input A character stream.
     */
    public IslandSqlLexerBase(CharStream input) {
        super(input);
    }

    /**
     * Saves the character at the previous position as "quoteDelimiter1".
     * Must be implemented as function returning a boolean value to ensure
     * it is executed.
     *
     * @return Returns always true.
     */
    @SuppressWarnings("SameReturnValue")
    public boolean saveQuoteDelimiter1() {
        quoteDelimiter1 = _input.getText(new Interval(_input.index()-1, _input.index()-1));
        return true;
    }

    /**
     * Determines if the character two positions before the current character
     * is equal to the character saved in "quoteDelimiter1".
     *
     * @return Returns true if character matches quoteDelimiter1.
     */
    public boolean checkQuoteDelimiter2() {
        String quoteDelimiter2 = _input.getText(new Interval(_input.index()-2, _input.index()-2));
        return quoteDelimiter2.equals(quoteDelimiter1);
    }

    /**
     * Determines if the character at the passed position is a valid character.
     * Begin-of-file is considered a valid character.
     *
     * @param validChars A string containing valid characters.
     * @param pos The position in the character stream.
     * @return Returns true if the character at the passed position is a valid character.
     */
    private boolean isCharOneOf(String validChars, int pos) {
        if (pos < 0) {
            return true;
        }
        String c = _input.getText(Interval.of(pos, pos));
        return validChars.contains(c);
    }

    /**
     * Determines if the current position is valid for a command.
     * A command must start on a new line. Between the new line and
     * the start of command an unbounded number of whitespace is
     * allowed. In other words a command can start in any column.
     * A command can start at begin-of-file.
     *
     * @return Returns true if the current position is valid for a command.
     */
    public boolean isBeginOfCommand() {
        int i = _input.index() - 1;
        while (isCharOneOf(" \t\r\n", i)) {
            if (i < 0 || isCharOneOf("\r\n", i)) {
                return true;
            }
            i--;
        }
        return false;
    }

    /**
     * Determines if the current position is valid for a SQL statement.
     * A SQL statement starts after a whitespace or a semicolon.
     * In other words multiple SQL statements on a single line are allowed.
     * A SQL statement can start at begin-of-file.
     *
     * @return Returns true if the current position is valid for a SQL statement.
     */
    public boolean isBeginOfStatement() {
        return isCharOneOf(" \t\r\n;", _input.index()-1);
    }

    /**
     * Determines if the character at a position matches the expected character.
     *
     * @param character The expected character.
     * @param pos The position in the character stream.
     * @return Returns true if the character at pos matches the expected character.
     */
    public boolean isCharAt(String character, int pos) {
        if (pos < 0) {
            return false;
        }
        String c = _input.getText(Interval.of(pos, pos));
        return c.equals(character);
    }
}
