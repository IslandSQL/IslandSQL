/*
 * Copyright 2023 Philipp Salvisberg <philipp.salvisberg@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.islandsql.grammar.util;

import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;

import java.util.ArrayList;
import java.util.List;

/**
 * Listener to find errors.
 */
public class SyntaxErrorListener extends BaseErrorListener {
    private final List<SyntaxErrorEntry> syntaxErrors = new ArrayList<>();

    /**
     * Add syntax error to the result.
     *
     * @param recognizer         What parser got the error. From this
     *                           object, you can access the context as well
     *                           as the input stream.
     * @param offendingSymbol    The offending token in the input token
     *                           stream, unless recognizer is a lexer (then it's null). If
     *                           no viable alternative error, {@code e} has token at which we
     *                           started production for the decision.
     * @param line               The line number in the input where the error occurred.
     * @param charPositionInLine The character position within that line where the error occurred.
     * @param msg                The message to emit.
     * @param e                  The exception generated by the parser that led to
     *                           the reporting of an error. It is null in the case where
     *                           the parser was able to recover in line without exiting the
     *                           surrounding rule.
     */
    @Override
    public void syntaxError(Recognizer<?, ?> recognizer,
                            Object offendingSymbol,
                            int line,
                            int charPositionInLine,
                            String msg,
                            RecognitionException e) {
        syntaxErrors.add(new SyntaxErrorEntry(offendingSymbol, line, charPositionInLine, msg, e));
    }

    /**
     * Return the result after walking the parse-tree.
     *
     * @return List of syntax errors.
     */
    public List<SyntaxErrorEntry> getSyntaxErrors() {
        return syntaxErrors;
    }
}
