/*
 * Copyright 2023 Philipp Salvisberg <philipp.salvisberg@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.islandsql.grammar.util;

import org.antlr.v4.runtime.RecognitionException;

/**
 * Representation of a syntax error.
 */
@SuppressWarnings("ClassCanBeRecord")
public class SyntaxErrorEntry {
    private final Object offendingSymbol;
    private final int line;
    private final int charPositionInLine;
    private final String message;
    private final RecognitionException exception;

    /**
     * Constructor.
     *
     * @param offendingSymbol    The offending token in the input token
     *                           stream, unless recognizer is a lexer (then it's null). If
     *                           no viable alternative error, {@code e} has token at which we
     *                           started production for the decision.
     * @param line               The line number in the input where the error occurred.
     * @param charPositionInLine The character position within that line where the error occurred.
     * @param message            The message to emit.
     * @param exception          The exception generated by the parser that led to
     *                           the reporting of an error. It is null in the case where
     *                           the parser was able to recover in line without exiting the
     *                           surrounding rule.
     */
    public SyntaxErrorEntry(Object offendingSymbol, int line, int charPositionInLine, String message, RecognitionException exception) {
        this.offendingSymbol = offendingSymbol;
        this.line = line;
        this.charPositionInLine = charPositionInLine;
        this.message = message;
        this.exception = exception;
    }

    /**
     * Get the offending token in the input token stream.
     *
     * @return Returns the offending token in the input token stream.
     */
    public Object getOffendingSymbol() {
        return offendingSymbol;
    }

    /**
     * Get the line number in the input where the error occurred.
     *
     * @return Returns the line number in the input where the error occurred.
     */
    public int getLine() {
        return line;
    }

    /**
     * Get the character position within that line where the error occurred.
     *
     * @return Returns the character position within that line where the error occurred.
     */
    public int getCharPositionInLine() {
        return charPositionInLine;
    }

    /**
     * Get the syntax error message.
     *
     * @return Returns the syntax error message.
     */
    public String getMessage() {
        return message;
    }

    /**
     * Get the exception generated by the parser.
     *
     * @return Returns the exception generated by the parser.
     */
    public RecognitionException getException() {
        return exception;
    }
}
