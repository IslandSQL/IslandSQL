/*
 * Copyright 2023 Philipp Salvisberg <philipp.salvisberg@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.islandsql.grammar;

import org.antlr.v4.runtime.CommonToken;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;

import java.util.List;

/**
 * Base class for IslandSqlParser class generated by ANTLR.
 * Used to provide methods to be used as semantic predicates in the parser grammar.
 */
public abstract class IslandSqlParserBase extends Parser {
    /**
     * Constructor
     *
     * @param input The token stream.
     */
    public IslandSqlParserBase(TokenStream input) {
        super(input);
        assert input instanceof CommonTokenStream : "Parser requires a CommonTokenStream as input.";
    }

    /**
     * Puts the first hint-style comment right to the current position on the default channel.
     * We know that the Oracle Database base considers only the first hint-style comment. See
     * <a href="https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Comments.html#GUID-D316D545-89E2-4D54-977F-FC97815CD62E">Hints</a>.
     * We do not want to put hint-style comments the DEFAULT_CHANNEL because they are still
     * comments and can be used anywhere in the code. As a result this would lead to parsing errors.
     * Therefore, we handle it in the parser in places where we expect a hint.
     */
    public void unhideFirstHint() {
        CommonTokenStream input = ((CommonTokenStream) this.getTokenStream());
        List<Token> tokens = input.getHiddenTokensToRight(input.index());
        for (Token token : tokens) {
            if (token.getType() == IslandSqlLexer.ML_HINT || token.getType() == IslandSqlLexer.SL_HINT) {
                ((CommonToken) token).setChannel(Token.DEFAULT_CHANNEL);
                return; // stop after first hint style comment
            }
        }
    }
}
